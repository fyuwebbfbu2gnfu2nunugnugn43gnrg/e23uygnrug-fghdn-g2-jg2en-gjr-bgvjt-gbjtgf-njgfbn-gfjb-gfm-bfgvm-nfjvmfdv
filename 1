--------------------------------------------------
-- HWID Check
--------------------------------------------------
local function getHWID()
    return game:GetService("RbxAnalyticsService"):GetClientId()
end

local whitelist = {
    ["1234567890abcdef1234567890abcdef"] = true,
    ["628338db-a878-4d0d-a724-35a038981446"] = true,
    ["EBFADE5D-0C6D-4DA8-B830-45F23882BBC3"] = true,
    ["629A149A-E87F-4E6B-97B3-1780465ED703"] = true,
    ["29C10EC9-F738-4CD0-B99E-2CDEB706EBD6"] = true,
}

local hwid = getHWID()
if not whitelist[hwid] then
    LocalPlayer:Kick("Your HWID is not whitelisted!")
end

local accessGranted = false
local otherThingLoaded = false

spawn(function()
    wait(1)
    otherThingLoaded = true
end)

local accessGranted = false
local otherThingLoaded = false

spawn(function()
	wait(1)
	otherThingLoaded = true
end)

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local TitleBar = Instance.new("Frame")
local Icon = Instance.new("ImageLabel")
local TitleText = Instance.new("TextLabel")
local CloseButton = Instance.new("TextButton")
local MinimizeButton = Instance.new("TextButton")
local MaximizeButton = Instance.new("TextButton")
local TextLabel = Instance.new("TextLabel")
local KeyLabel = Instance.new("TextLabel")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local player = game:GetService("Players").LocalPlayer
local Character = player.Character or player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local originalWalkSpeed = Humanoid.WalkSpeed
local originalJumpPower = Humanoid.JumpPower
local correctKey = "123"
local cursorColor = Color3.fromRGB(255, 255, 255)
local typedKeyColor = Color3.fromRGB(128, 128, 128)
local underlineLength = 1
local underlineChar = "▁"
local blinkSpeed = 0.5
local authDelay = 5
local hideDelay = 5
local typedKey = ""
local showUnderline = true
local canType = false
local isAuthenticating = false

ScreenGui.Name = "CST"
ScreenGui.Parent = game.CoreGui

Frame.Name = "MoozeFrame"
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.Size = UDim2.new(0, 600, 0, 300)
Frame.Position = UDim2.new(0.5, -300, 0.5, -150)
Frame.ClipsDescendants = true

TitleBar.Name = "TitleBar"
TitleBar.Parent = Frame
TitleBar.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
TitleBar.BorderSizePixel = 0
TitleBar.Size = UDim2.new(1, 0, 0, 28)
TitleBar.Position = UDim2.new(0, 0, 0, 0)
TitleBar.Active = true

Icon.Name = "TitleIcon"
Icon.Parent = TitleBar
Icon.BackgroundTransparency = 1
Icon.Size = UDim2.new(0, 16, 0, 16)
Icon.Position = UDim2.new(0, 6, 0, 6)
Icon.Image = "rbxassetid://96125071820076"

TitleText.Name = "TitleText"
TitleText.Parent = TitleBar
TitleText.BackgroundTransparency = 1
TitleText.Size = UDim2.new(1, -100, 1, 0)
TitleText.Position = UDim2.new(0, 28, 0, 0)
TitleText.Text = "Administrator: Stream"
TitleText.Font = Enum.Font.SourceSans
TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleText.TextSize = 18
TitleText.TextXAlignment = Enum.TextXAlignment.Left

CloseButton.Name = "CloseButton"
CloseButton.Parent = TitleBar
CloseButton.Size = UDim2.new(0, 40, 0, 28)
CloseButton.Position = UDim2.new(1, -40, 0, 0)
CloseButton.BackgroundTransparency = 1
CloseButton.Text = "X"
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 18

MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = TitleBar
MinimizeButton.Size = UDim2.new(0, 40, 0, 28)
MinimizeButton.Position = UDim2.new(1, -120, 0, 0)
MinimizeButton.BackgroundTransparency = 1
MinimizeButton.Text = "-"
MinimizeButton.Font = Enum.Font.SourceSansBold
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 24

MaximizeButton.Name = "MaximizeButton"
MaximizeButton.Parent = TitleBar
MaximizeButton.Size = UDim2.new(0, 40, 0, 28)
MaximizeButton.Position = UDim2.new(1, -80, 0, 0)
MaximizeButton.BackgroundTransparency = 1
MaximizeButton.Text = "▢"
MaximizeButton.Font = Enum.Font.SourceSansBold
MaximizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MaximizeButton.TextSize = 18
MaximizeButton.Visible = false

local dragging = false
local dragInput, dragStart, startPos
local function update(input)
	local delta = input.Position - dragStart
	Frame.Position = UDim2.new(Frame.Position.X.Scale, startPos.X.Offset + delta.X, Frame.Position.Y.Scale, startPos.Y.Offset + delta.Y)
end
TitleBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = Frame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)
TitleBar.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)
UserInputService.InputChanged:Connect(function(input)
	if dragging and input == dragInput then
		update(input)
	end
end)
local normalSize = Frame.Size
local normalContentVisible = true
MinimizeButton.MouseButton1Click:Connect(function()
	if normalContentVisible then
		TweenService:Create(Frame, TweenInfo.new(0.2), {Size = UDim2.new(normalSize.X.Scale, normalSize.X.Offset, 0, TitleBar.Size.Y.Offset)}):Play()
		TextLabel.Visible = false
		KeyLabel.Visible = false
		MaximizeButton.Visible = true
		normalContentVisible = false
	end
end)
MaximizeButton.MouseButton1Click:Connect(function()
	if not normalContentVisible then
		TweenService:Create(Frame, TweenInfo.new(0.2), {Size = normalSize}):Play()
		TextLabel.Visible = true
		KeyLabel.Visible = true
		MaximizeButton.Visible = false
		normalContentVisible = true
	end
end)
CloseButton.MouseButton1Click:Connect(function()
	ScreenGui:Destroy()
end)
TextLabel.Name = "MoozeASCII"
TextLabel.Parent = Frame
TextLabel.BackgroundTransparency = 1
TextLabel.Size = UDim2.new(1, 0, 0.8, 0)
TextLabel.Position = UDim2.new(-0.067, 0, -0.1, 0)
TextLabel.Font = Enum.Font.Code
TextLabel.Text = [[
     ooo        ooooo    .oooooo.     .oooooo.     oooooooooooo   oooooooooooo
     `88.       .888'   d8p'  `Y8b   d8p'  `Y8b   d'd888' '888'       `8     
888b     d'888   888      888 888      888        .888P      888
     8 Y88  .P  888   888      888 888      888       d888'       888oooo8
     8  `888'   888   888      888 888      888     .888P         888    "
            8    Y     888   `88b    d88` `88b    d88`    d888'     .P   888       o    
       o8o        o888o    Y8bood8P'    Y8bood8P'   .8888888888P    O888ooooood8
]]
TextLabel.TextColor3 = Color3.fromRGB(128, 128, 128)
TextLabel.TextSize = 13
TextLabel.TextWrapped = true
TextLabel.TextXAlignment = Enum.TextXAlignment.Center
TextLabel.TextYAlignment = Enum.TextYAlignment.Center
KeyLabel.Name = "KeyLabel"
KeyLabel.Parent = Frame
KeyLabel.BackgroundTransparency = 1
KeyLabel.Position = UDim2.new(0, 29, 0, 200)
KeyLabel.Size = UDim2.new(0.7, 0, 0.1, 0)
KeyLabel.Font = Enum.Font.Code
KeyLabel.RichText = true
KeyLabel.TextColor3 = Color3.fromRGB(128, 128, 128)
KeyLabel.TextSize = 12
KeyLabel.TextXAlignment = Enum.TextXAlignment.Left
KeyLabel.TextYAlignment = Enum.TextYAlignment.Center
KeyLabel.Active = true
local function updateKeyLabel()
	if isAuthenticating then return end
	local underline = showUnderline and string.rep(underlineChar, underlineLength) or ""
	KeyLabel.Text = string.format('[<font color="rgb(255,0,0)">—</font>] Key: <font color="rgb(%d,%d,%d)">%s</font><font color="rgb(%d,%d,%d)">%s</font>', typedKeyColor.R*255, typedKeyColor.G*255, typedKeyColor.B*255, typedKey, cursorColor.R*255, cursorColor.G*255, cursorColor.B*255, underline)
end
task.spawn(function()
	while true do
		if not isAuthenticating then
			showUnderline = not showUnderline
			updateKeyLabel()
		end
		wait(blinkSpeed)
	end
end)
local keyMapping = {Zero="0", One="1", Two="2", Three="3", Four="4", Five="5", Six="6", Seven="7", Eight="8", Nine="9", Comma=",", Period=".", Slash="/", BackSlash="\\", Semicolon=";", Quote="'", Minus="-", Equal="=", Grave="`", LeftBracket="[", RightBracket="]", F1="F1", F2="F2", F3="F3", F4="F4", F5="F5", F6="F6", F7="F7", F8="F8", F9="F9", F10="F10", F11="F11", F12="F12", Space=" ", Tab="\t", CapsLock="CapsLock", Insert="Insert", Delete="Delete", Home="Home", End="End", PageUp="PageUp", PageDown="PageDown", Up="↑", Down="↓", Left="←", Right="→"}
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if canType and input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.Return then
			canType = false
			Humanoid.WalkSpeed = originalWalkSpeed
			Humanoid.JumpPower = originalJumpPower
			if typedKey == correctKey then
				isAuthenticating = true
				KeyLabel.Text = '[<font color="rgb(255,0,0)">-</font>] Authenticating...'
				wait(authDelay)
				repeat task.wait() until otherThingLoaded
				KeyLabel.Text = '[<font color="rgb(255,0,0)">-</font>] Hiding console in <font color="rgb(255,0,0)">5.00</font> seconds!'
				wait(hideDelay)
				local function fadeOut(gui, duration)
					for _, object in ipairs(gui:GetDescendants()) do
						if object:IsA("TextLabel") then
							TweenService:Create(object, TweenInfo.new(duration), {TextTransparency = 1}):Play()
						elseif object:IsA("TextButton") then
							TweenService:Create(object, TweenInfo.new(duration), {TextTransparency = 1}):Play()
						elseif object:IsA("ImageLabel") then
							TweenService:Create(object, TweenInfo.new(duration), {ImageTransparency = 1}):Play()
						elseif object:IsA("Frame") then
							TweenService:Create(object, TweenInfo.new(duration), {BackgroundTransparency = 1}):Play()
						end
					end
				end
				fadeOut(ScreenGui, 2)
				wait(2)
				ScreenGui:Destroy()
				accessGranted = true
			else
				player:Kick("Invalid Key")
			end
			updateKeyLabel()
		elseif input.KeyCode == Enum.KeyCode.Backspace then
			typedKey = typedKey:sub(1, -2)
			updateKeyLabel()
		else
			local keyStr = input.KeyCode.Name
			if #keyStr == 1 then
				typedKey = typedKey .. keyStr:lower()
			elseif keyMapping[keyStr] then
				typedKey = typedKey .. keyMapping[keyStr]
			end
			updateKeyLabel()
		end
	end
end)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		local mousePos = input.Position
		local absPos = KeyLabel.AbsolutePosition
		local absSize = KeyLabel.AbsoluteSize
		if mousePos.X >= absPos.X and mousePos.X <= absPos.X + absSize.X and mousePos.Y >= absPos.Y and mousePos.Y <= absPos.Y + absSize.Y then
			canType = true
			typedKey = ""
			updateKeyLabel()
			originalWalkSpeed = Humanoid.WalkSpeed
			originalJumpPower = Humanoid.JumpPower
			Humanoid.WalkSpeed = 0
			Humanoid.JumpPower = 0
		else
			if canType then
				Humanoid.WalkSpeed = originalWalkSpeed
				Humanoid.JumpPower = originalJumpPower
			end
			canType = false
			updateKeyLabel()
		end
	end
end)
updateKeyLabel()
repeat task.wait() until accessGranted


--------------------------------------------------
-- Global Enable Check
--------------------------------------------------
if not getgenv().Mooze or not getgenv().Mooze.Global or not getgenv().Mooze.Global.Enabled then
    return
end


--------------------------------------------------
-- Trigger Bot Code with Velocity‑Based Lead Prediction
-- + Global KO / Visibility Checks per getgenv().Mooze
--------------------------------------------------

local Players          = game:GetService("Players")
local LocalPlayer      = Players.LocalPlayer
local Camera           = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService       = game:GetService("RunService")

-- Cache config
local config         = getgenv().Mooze
local triggerConfig  = config["Trigger Bot"]
local velocityConfig = config["Velocity Calculation"]

-- Pre‑build your allowed‑parts list
local allowedPartsList = {
    "Head","UpperTorso","HumanoidRootPart","LowerTorso",
    "LeftHand","RightHand","LeftLowerArm","RightLowerArm",
    "LeftUpperArm","RightUpperArm","LeftFoot","LeftLowerLeg",
    "LeftUpperLeg","RightLowerLeg","RightFoot","RightUpperLeg"
}

-- Mouse & FOV circle
local mouse  = LocalPlayer:GetMouse()
local Circle = Drawing.new("Circle")
Circle.Visible      = false
Circle.Transparency = 0
Circle.Color       = Color3.new(1,1,1)
Circle.Filled      = false

-- Simple wall‑check as before
local function WallCheck(part)
    local origin = Camera.CFrame.Position
    local dir    = (part.Position - origin).Unit
    local dist   = (part.Position - origin).Magnitude
    local params = RaycastParams.new()
    params.FilterDescendantsInstances = {LocalPlayer.Character, Camera}
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.IgnoreWater = true
    local hit = workspace:Raycast(origin, dir * dist, params)
    if hit then
        local mdl = hit.Instance:FindFirstAncestorOfClass("Model")
        return not (mdl and Players:GetPlayerFromCharacter(mdl))
    end
    return false
end

-- Utility: check knock & visibility per context
local function isValid(plr, context)
    local ctx = config.Global.Check[context]
    if not ctx then return true end

    local char = plr.Character
    if not char then
        return false
    end

    local body    = char:FindFirstChild("BodyEffects")
    local knocked = body and body:FindFirstChild("K.O") and body["K.O"].Value or false
    if knocked and ctx.Knocked then
        return false
    end

    if plr == LocalPlayer and knocked and ctx["Self-Knocked"] then
        return false
    end

    if ctx.Visible then
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if hrp and WallCheck(hrp) then
            return false
        end
    end

    return true
end

-- Find the closest target inside the circle (applies selection checks)
local scanInterval  = 0.033
local timeSinceLast = scanInterval

local function GetPlayerInCircle()
    local closestDist = math.huge
    local bestPlayer  = nil

    local circlePos = Circle.Position
    local radius    = Circle.Radius
    local pred      = triggerConfig.Prediction
    local velOn     = velocityConfig.Enabled
    local velMag    = velocityConfig.Magnitude

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and isValid(plr, "When selecting a player") then
            local char = plr.Character
            for _, partName in ipairs(allowedPartsList) do
                local part = char:FindFirstChild(partName)
                if part and part.Transparency < 1 then
                    local pos = part.Position
                    if partName == "HumanoidRootPart" then
                        pos = pos + Vector3.new(pred.X, pred.Y, pred.Z)
                        if velOn then
                            local v = part.Velocity
                            if v.Magnitude > velMag then
                                pos = pos + v * 0.1
                            end
                        end
                    end

                    local screenPos, onScreen = Camera:WorldToScreenPoint(pos)
                    if onScreen then
                        if not (config.Global.Check["When selecting a player"].Visible and WallCheck(part)) then
                            local dist = (Vector2.new(screenPos.X, screenPos.Y) - circlePos).Magnitude
                            if dist <= radius and dist < closestDist then
                                closestDist = dist
                                bestPlayer  = plr
                            end
                        end
                    end
                end
            end
        end
    end

    return bestPlayer
end

-- Toggle bind
local toggleKey = Enum.KeyCode[ triggerConfig.Activation["Activation Bind"]:upper() ]
UserInputService.InputBegan:Connect(function(input, gp)
    if not gp and input.KeyCode == toggleKey then
        triggerConfig.Enabled = not triggerConfig.Enabled
    end
end)

-- Main loop, throttled
RunService.Heartbeat:Connect(function(dt)
    timeSinceLast = timeSinceLast + dt
    if timeSinceLast < scanInterval then return end
    timeSinceLast = 0

    if triggerConfig.Enabled then
        if not isValid(LocalPlayer, "When selecting a player") then
            Circle.Visible = false
            return
        end

        local mouseLoc      = UserInputService:GetMouseLocation()
        Circle.Position     = Vector2.new(mouseLoc.X, mouseLoc.Y)
        Circle.Radius       = triggerConfig.FOV.X * 7
        Circle.NumSides     = math.floor(Circle.Radius * 10)
        Circle.Visible      = true

        local target = GetPlayerInCircle()
        if target then
            if not isValid(target, "Whilst a player is selected") then
                return
            end

            local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
            if tool and tool:FindFirstChild("Handle") then
                local function clean(str)
                    return str:lower():gsub("[%[%]%- ]","")
                end
                local toolName = clean(tool.Name)
                local allowed  = false
                for _, w in ipairs(triggerConfig.Weapons) do
                    if toolName:find(clean(w),1,true) then
                        allowed = true
                        break
                    end
                end

                if allowed and tick() - (LastActivationTime or 0) >= triggerConfig["Click Cooldown"] then
                    tool:Activate()
                    tool:Deactivate()
                    LastActivationTime = tick()
                end
            end
        end
    else
        Circle.Visible = false
    end
end)
--------------------------------------------------
-- Camera Aimbot (with KO/Visibility Checks)
--------------------------------------------------
do
    local config         = getgenv().Mooze
    local camConfig      = config["Camera Aimbot"]
    local globalKeybind  = config.Global.Keybind or "E"
    camConfig.Keybind    = globalKeybind

    local Players         = game:GetService("Players")
    local LocalPlayer     = Players.LocalPlayer
    local UserInputService= game:GetService("UserInputService")
    local RunService      = game:GetService("RunService")
    local Camera          = workspace.CurrentCamera

    -- Simple wall‑check
    local function WallCheck(part)
        local origin = Camera.CFrame.Position
        local dir    = (part.Position - origin).Unit
        local dist   = (part.Position - origin).Magnitude
        local params = RaycastParams.new()
        params.FilterDescendantsInstances = {LocalPlayer.Character, Camera}
        params.FilterType = Enum.RaycastFilterType.Blacklist
        params.IgnoreWater = true
        local hit = workspace:Raycast(origin, dir * dist, params)
        if hit then
            local mdl = hit.Instance:FindFirstAncestorOfClass("Model")
            return not (mdl and Players:GetPlayerFromCharacter(mdl))
        end
        return false
    end

    -- KO/visibility helper
    local function isValid(plr, context)
        local ctx = config.Global.Check[context]
        if not ctx then return true end

        local char = plr.Character
        if not char then
            warn(("[CameraAim] %s has no Character"):format(plr.Name))
            return false
        end

        local body    = char:FindFirstChild("BodyEffects")
        local knocked = body and body:FindFirstChild("K.O") and body["K.O"].Value or false
        if knocked and ctx.Knocked then
            warn(("[CameraAim] skipping %s because knocked"):format(plr.Name))
            return false
        end

        if plr == LocalPlayer and knocked and ctx["Self-Knocked"] then
            warn("[CameraAim] not aiming: local player is knocked")
            return false
        end

        if ctx.Visible then
            local hrp = char:FindFirstChild("HumanoidRootPart")
            if hrp and WallCheck(hrp) then
                warn(("[CameraAim] skipping %s because not visible"):format(plr.Name))
                return false
            end
        end

        return true
    end

    -- get the single best part to aim at
    local function getClosestPart(character)
        local bestPart, bestDist = nil, math.huge
        local mousePos = UserInputService:GetMouseLocation()

        for _, p in ipairs(character:GetDescendants()) do
            if p:IsA("BasePart") then
                local screenPos, onScreen = Camera:WorldToViewportPoint(p.Position)
                if onScreen then
                    local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                    if dist < bestDist then
                        bestDist, bestPart = dist, p
                    end
                end
            end
        end

        return bestPart
    end

    -- scan for best target
    local function getTarget()
        local bestTarget, shortest = nil, math.huge
        local mousePos = UserInputService:GetMouseLocation()

        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer and isValid(plr, "When selecting a player") then
                local part
                if camConfig["Hit Part"]:lower() == "closest point" then
                    part = getClosestPart(plr.Character)
                else
                    part = plr.Character:FindFirstChild("HumanoidRootPart")
                end

                if part then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                    if onScreen then
                        local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                        if dist < shortest then
                            shortest, bestTarget = dist, part
                        end
                    end
                end
            end
        end

        return bestTarget
    end

    -- keybind toggle
    local aimbotKey = Enum.KeyCode[ camConfig.Keybind:upper() ]
    UserInputService.InputBegan:Connect(function(input, gp)
        if gp then return end
        if input.KeyCode == aimbotKey then
            camConfig.Enabled = not camConfig.Enabled
            warn(("CameraAim is now %s"):format(tostring(camConfig.Enabled)))
        end
    end)

    -- main aim loop
    local accumulator = 0
    RunService.RenderStepped:Connect(function(dt)
        -- enforce local KO/self‑knock
        if not isValid(LocalPlayer, "When selecting a player") then
            return
        end

        if not camConfig.Enabled then return end
        accumulator = accumulator + dt
        if accumulator < 0.05 then return end
        accumulator = 0

        local targetPart = getTarget()
        if targetPart then
            local plr = Players:GetPlayerFromCharacter(targetPart.Parent)
            if plr and isValid(plr, "Whilst a player is selected") then
                local pred = Vector3.new(
                    camConfig.Prediction.X,
                    camConfig.Prediction.Y,
                    camConfig.Prediction.Z
                )
                local aimPos = targetPart.Position + pred
                local newCF  = CFrame.new(Camera.CFrame.Position, aimPos)
                Camera.CFrame = Camera.CFrame:Lerp(newCF, camConfig.Snappiness)
                warn("[CameraAim] Aimed at "..plr.Name)
            end
        end
    end)
end
---------------------------------------------------------
-- Enhanced Silent Aimbot
---------------------------------------------------------
if not LPH_OBFUSCATED then
    LPH_JIT_MAX = function(...) return (...) end
    LPH_NO_VIRTUALIZE = function(...) return (...) end
end

LPH_JIT_MAX(function()
    local Config = getgenv().Mooze["Silent Aimbot"]
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local LocalPlayer = Players.LocalPlayer
    local Camera = workspace.CurrentCamera

    local lastMousePos = Vector2.zero
    local cachedTarget = nil

    -- Utility: Check if a player is valid
    local function isValidTarget(player)
        return player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0
    end

    -- Utility: Team Check
    local function isEnemy(player)
        if not Config["Team Check"] then return true end
        return player.Team ~= LocalPlayer.Team
    end

    -- Get closest part to cursor
    local function getClosestPart(player)
        local bestPart, shortestDist = nil, math.huge
        local pointScale = Config["Closest Point"] and Config["Closest Point"]["Point Scale"] or 1.0

        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if onScreen then
                    local partPos = Vector2.new(screenPos.X, screenPos.Y)
                    local dist = (lastMousePos - partPos).Magnitude * pointScale
                    if dist < shortestDist then
                        bestPart, shortestDist = part, dist
                    end
                end
            end
        end

        return bestPart
    end

    -- Drawing FOV
    local FOV = Drawing.new("Circle")
    FOV.Thickness = 2
    FOV.NumSides = 100
    FOV.Filled = false
    FOV.Transparency = 1

    -- Update FOV and get target
    local function updateFOV()
        lastMousePos = UserInputService:GetMouseLocation()
        local fovConfig = Config["FOV"]
        local currentTool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
        local radius = fovConfig["Size"].X * 7

        -- Weapon-specific FOV scaling
        if fovConfig["Weapons Configuration"] and fovConfig["Weapons Configuration"]["Enabled"] and currentTool then
            local toolName = string.lower(currentTool.Name)
            if string.find(toolName, "shotgun") then
                radius = fovConfig["Weapons Configuration"]["Shotguns"].X * 7
            elseif string.find(toolName, "pistol") then
                radius = fovConfig["Weapons Configuration"]["Pistols"].X * 7
            end
        end

        FOV.Visible = fovConfig["Enabled"]
        FOV.Position = lastMousePos
        FOV.Radius = radius

        local bestPart, bestDist = nil, math.huge

        for _, player in pairs(Players:GetPlayers()) do
            if isValidTarget(player) and isEnemy(player) then
                local part = Config["Hit Part"] == "Closest Point" and getClosestPart(player) or player.Character:FindFirstChild("Head")
                if part then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                    if onScreen then
                        local dist = (lastMousePos - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                        if dist < bestDist and dist <= radius then
                            bestPart, bestDist = part, dist
                        end
                    end
                end
            end
        end

        cachedTarget = bestPart
    end

    RunService.RenderStepped:Connect(updateFOV)

    -- Apply prediction offset
    local function applyPrediction(cf, offset)
        return cf * CFrame.new(offset.X, offset.Y, offset.Z)
    end

    -- Mouse method hijack
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    local oldIndex = mt.__index
    mt.__index = newcclosure(function(obj, prop)
        if obj:IsA("Mouse") and (prop == "Hit" or prop == "Target") then
            if cachedTarget then
                local prediction = Config["Prediction"]
                local redir = Config["Client Bullet Redirection"]
                local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")

                if redir["Enabled"] and tool then
                    for _, weaponName in ipairs(redir["Weapons"]) do
                        if string.find(string.lower(tool.Name), string.lower(weaponName)) then
                            prediction = redir["Prediction"]
                            break
                        end
                    end
                end

                local predOffset = cachedTarget.Velocity * Vector3.new(prediction.X, prediction.Y, prediction.Z)
                return prop == "Hit" and applyPrediction(cachedTarget.CFrame, predOffset) or cachedTarget
            end
        end
        return oldIndex(obj, prop)
    end)
end)()

-----------------------------------
-- Slowdown Modification 
-----------------------------------
local is_firing = false
local utility = {}

utility.get_gun = function()
    for _, tool in next, game.Players.LocalPlayer.Character:GetChildren() do
        if tool:IsA("Tool") and tool:FindFirstChild("Ammo") then
            return tool
        end
    end
end

utility.rapid = function(tool)
    tool:Activate()
end

game:GetService("UserInputService").InputBegan:Connect(function(i)
    if i.UserInputType == Enum.UserInputType.MouseButton1 then
        local gun = utility.get_gun()
        if gun and not is_firing then
            is_firing = true
            local gunName = gun.Name
            local multiplier = 1
            local slowdownConfig = getgenv().Mooze["Movement Modifications"]["Slowdown Modifications"]
            if slowdownConfig and slowdownConfig["Enabled"] then
                local weaponConfig = slowdownConfig["Weapons"][gunName]
                if weaponConfig then
                    multiplier = weaponConfig["Multiplier"] or 1
                end
            end
            local fireRateDelay = multiplier
            print("Firing with delay:", fireRateDelay)
            while is_firing do
                utility.rapid(gun)
                task.wait(fireRateDelay)
            end
        end
    end
end)

game:GetService("UserInputService").InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        is_firing = false
    end
end)


-----------------------------
-- Speed Modification 
-----------------------------------
-- early out if config isn’t set up correctly
if not getgenv().Mooze 
    or type(getgenv().Mooze) ~= "table" 
    or not getgenv().Mooze["Movement Modifications"] 
    or not getgenv().Mooze["Movement Modifications"]["Speed Modifications"] 
    or not getgenv().Mooze["Movement Modifications"]["Speed Modifications"].Enabled 
then
    return
end

local Mooze       = getgenv().Mooze
local SpeedConfig = Mooze["Movement Modifications"]["Speed Modifications"]

local Players           = game:GetService("Players")
local RunService        = game:GetService("RunService")
local UserInputService  = game:GetService("UserInputService")

local player    = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid  = character:FindFirstChildOfClass("Humanoid") or character:WaitForChild("Humanoid")

local isShooting       = false
local isReloading      = false
local LOW_HEALTH_THRESHOLD = 50

-- detect shooting
local mouse = player:GetMouse()
mouse.Button1Down:Connect(function() isShooting = true end)
mouse.Button1Up:Connect(function()   isShooting = false end)

-- detect reload (R key)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.R and not isReloading then
        isReloading = true
        task.delay(1, function() isReloading = false end)
    end
end)

-- update references on respawn
player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = nil
    humanoid = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid")
end)

-- main loop: read your .Multiplier values, *then* apply *100
RunService.RenderStepped:Connect(function()
    if not SpeedConfig.Enabled then return end
    if not humanoid or humanoid.Health <= 0 then return end

    -- start with the “normal” multiplier
    local multiplier = SpeedConfig.Normal and SpeedConfig.Normal.Multiplier or (humanoid.WalkSpeed / 100)

    -- override if low‐health, reloading, or shooting
    if humanoid.Health < LOW_HEALTH_THRESHOLD and SpeedConfig["Low Health"] then
        multiplier = SpeedConfig["Low Health"].Multiplier
    elseif isReloading and SpeedConfig.Reloading then
        multiplier = SpeedConfig.Reloading.Multiplier
    elseif isShooting and SpeedConfig.Shooting then
        multiplier = SpeedConfig.Shooting.Multiplier
    end

    -- here’s the magic: multiply by 100
    local targetSpeed = multiplier * 70

    if humanoid.WalkSpeed ~= targetSpeed then
        humanoid.WalkSpeed = targetSpeed
    end
end)
